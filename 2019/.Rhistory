#Review Data
str(raw.data)
head(raw.data)
#Create new data frame with the following fields:
#1) Last name
#2) Project Code
#3) Date
#4) Duration
#Convert column with names and job codes into a character string
col2.1 <- as.character(raw.data$V2)
last.names <- c("Cronan", "Darmody", "Hallet", "Lascheck", "Nemens", "Thoreson", "Tripodi")
lastName.List <- character(length = length(col2.1))
for(i in 1:length(last.names))
{
for(v in 1:length(col2.1))
{
if(is_empty(unlist(str_extract_all(col2.1[v], last.names[i]))) == T)
{lastName.List[v] <- lastName.List[v]} else
{lastName.List[v] <- unlist(str_extract_all(col2.1[v], last.names[i]))}
}
}
cbind(lastName.List, col2.1)
head(raw.data)
project.codes <- c("ADM", "LVE", "3DF", "FLB")
#Create a vector store last names.
projectCode.List <- character(length = length(col2.1))
#Check character strings for last names and sort out from other text.
for(i in 1:length(project.codes))
{
for(v in 1:length(col2.1))
{
if(is_empty(unlist(str_extract_all(col2.1[v], project.codes[i]))) == T)
{projectCode.List[v] <- projectCode.List[v]} else
{projectCode.List[v] <- unlist(str_extract_all(col2.1[v], project.codes[i]))}
}
}
cbind(col2.1, projectCode.List)
oddballs <- c("3D", "Taylor", "Holiday")
corollary <- c("3DF", "WWC", "LVE")
col2.1[17]
unlist(str_extract_all(col2.1[17], incorrect.codes[1]))
str_extract_all(col2.1[17], incorrect.codes[1])
incorrect.codes[1]
#Create a list of incorrectly recorded project codes.
incorrect.codes <- c("3D", "Taylor", "Holiday")
#Create correspnding list of correct codes.
correct.codes <- c("3DF", "WWC", "LVE")
unlist(str_extract_all(col2.1[17], incorrect.codes[1]))
unlist(str_extract_all(col2.1[17], incorrect.codes[1])) == incorrect.codes
correct.codes[unlist(str_extract_all(col2.1[17], incorrect.codes[1])) == incorrect.codes]
old <- projectCode.List
#Check character strings for incorrect codes and add correct codes to list.
for(i in 1:length(incorrect.codes))
{
for(v in 1:length(col2.1))
{
if(is_empty(unlist(str_extract_all(col2.1[v], incorrect.codes[i]))) == T)
{projectCode.List[v] <- projectCode.List[v]} else
{projectCode.List[v] <- correct.codes[unlist(str_extract_all(col2.1[v], incorrect.codes[1])) == incorrect.codes]}
}
}
#Create a vector that lists possible project codes.
project.codes <- c("ADM", "LVE", "3DF", "FLB")
#Create a vector store last names.
projectCode.List <- character(length = length(col2.1))
#Check character strings for last names and sort out from other text.
for(i in 1:length(project.codes))
{
for(v in 1:length(col2.1))
{
if(is_empty(unlist(str_extract_all(col2.1[v], project.codes[i]))) == T)
{projectCode.List[v] <- projectCode.List[v]} else
{projectCode.List[v] <- unlist(str_extract_all(col2.1[v], project.codes[i]))}
}
}
#Fix missing codes
#Create a list of incorrectly recorded project codes.
incorrect.codes <- c("3D", "Taylor", "Holiday")
#Create correspnding list of correct codes.
correct.codes <- c("3DF", "WWC", "LVE")
#Check character strings for incorrect codes and add correct codes to list.
for(i in 1:length(incorrect.codes))
{
for(v in 1:length(col2.1))
{
if(is_empty(unlist(str_extract_all(col2.1[v], incorrect.codes[i]))) == T)
{projectCode.List[v] <- projectCode.List[v]} else
{projectCode.List[v] <- correct.codes[unlist(str_extract_all(col2.1[v], incorrect.codes[i])) == incorrect.codes]}
}
}
cbind(col2.1, old, projectCode.List)
#Create a vector that lists possible last names.
last.names <- c("Cronan", "Darmody", "Hallet", "Lascheck", "Nemens", "Thoreson", "Tripodi")
#Create a vector store last names.
lastName.List <- character(length = length(col2.1))
#Check character strings for last names and sort out from other text.
for(i in 1:length(last.names))
{
for(v in 1:length(col2.1))
{
if(is_empty(unlist(str_extract_all(col2.1[v], last.names[i]))) == T)
{lastName.List[v] <- lastName.List[v]} else
{lastName.List[v] <- unlist(str_extract_all(col2.1[v], last.names[i]))}
}
}
#Create a vector that lists possible project codes.
project.codes <- c("ADM", "LVE", "3DF", "FLB")
#Create a vector store last names.
projectCode.List <- character(length = length(col2.1))
#Check character strings for last names and sort out from other text.
for(i in 1:length(project.codes))
{
for(v in 1:length(col2.1))
{
if(is_empty(unlist(str_extract_all(col2.1[v], project.codes[i]))) == T)
{projectCode.List[v] <- projectCode.List[v]} else
{projectCode.List[v] <- unlist(str_extract_all(col2.1[v], project.codes[i]))}
}
}
#Fix missing codes
#Create a list of incorrectly recorded project codes.
incorrect.codes <- c("3D", "Taylor", "Holiday", "FSB")
#Create correspnding list of correct codes.
correct.codes <- c("3DF", "WWC", "LVE", "FLB")
#Check character strings for incorrect codes and add correct codes to list.
for(i in 1:length(incorrect.codes))
{
for(v in 1:length(col2.1))
{
if(is_empty(unlist(str_extract_all(col2.1[v], incorrect.codes[i]))) == T)
{projectCode.List[v] <- projectCode.List[v]} else
{projectCode.List[v] <- correct.codes[unlist(str_extract_all(col2.1[v], incorrect.codes[i])) == incorrect.codes]}
}
}
cbind(col2.1, old, projectCode.List)
head(raw.data)
time.data <- raw.data[- null.rows,]
time.data <- numeric(length(col2.1))
col3.1 <- strsplit(as.character(raw.data$V6), ":")
col3.1
col3.1_hrs <- as.numeric(unlist(lapply(col3.1, function(x) x[1])))
col3.1_mins <- as.numeric(unlist(lapply(col3.1, function(x) x[2])))/60
duration <- round(col3.1_hrs + col3.1_mins,2)
duration
billing <- data.frame(last_name = lastName.List, project_code = projectCode.List, date = raw.data$V4,
start_time = raw.data$V5, duration = duration)
billing %>%
group_by(last_name) %>%
summarise(sum = sum(duration), n = n())
#Author: James Cronan
#Created on: 05-Jan-2021
#Location: USDA, Forest Service, PNW Resarch Station, Pacific Wildland Fire Sciences Lab, 400 N 34th Street, Suite 201, Seattle, WA 98103
#Purpose: To divide hours downloaded from Google Calendar through GTimeReport by project billing code for contracted employees.
#Reset functions
rm(list=ls())
dev.off()
#Libraries
library(dplyr)
library(tidyr)
library(stringr)
library(rlang)
library(Rfast)
#Open Data
setwd("C:/Users/jcronan/Documents/GitHub/WageBilling/2020")
raw.data <- read.table("Time report 2020-01-01 - 2020-12-31.csv", header = T, fill = T, skip = 0, sep = ",", quote = "\"")
codes <- read.table("projectCodes_2020.csv", header = F, fill = T, skip = 1, sep = ",")
#Review Data
str(raw.data)
head(raw.data)
#Created on: 26-Oct-2020
#Location: USDA, Forest Service, PNW Resarch Station, Pacific Wildland Fire Sciences Lab, 400 N 34th Street, Suite 201, Seattle, WA 98103
#Purpose: To divide hours downloaded from Google Calendar through GTimeReport by project billing code for contracted employees.
#Reset functions
rm(list=ls())
dev.off()
#Libraries
library(dplyr)
library(tidyr)
library(stringr)
library(rlang)
library(Rfast)
#Open Data
setwd("C:/Users/jcronan/Documents/GitHub/WageBilling/2019")
raw.data <- read.table("Time report 2019-01-01 - 2019-12-31.csv", header = F, fill = T, skip = 1, sep = ",")
codes <- read.table("projectCodes_2019.csv", header = F, fill = T, skip = 1, sep = ",")
#Review Data
str(raw.data)
head(raw.data)
#Open Data
setwd("C:/Users/jcronan/Documents/GitHub/WageBilling/2020")
raw.data <- read.table("Time report 2020-01-01 - 2020-12-31.csv", header = F, fill = T, skip = 1, sep = ",", quote = "\"")
codes <- read.table("projectCodes_2020.csv", header = F, fill = T, skip = 1, sep = ",")
#Review Data
str(raw.data)
head(raw.data)
#Generate a vector that converts factor levels of dates into date values
date <- as.Date(raw.data$Date, format = "%m/%d/%Y")
#Generate a vector that converts dates into work weeks
week <- as.numeric(strftime(date, format = "%V"))
#Convert column with names and job codes into a character string
col2.1 <- as.character(raw.data$Text)
#Create a vector that lists possible last names.
last.names <- c("Cronan", "Eagle", "Lascheck", "Tripodi", "Thoreson", "Nemens", "Darmody", "Hallet")
#Create a vector store last names.
lastName.List <- character(length = length(col2.1))
#Check character strings for last names and sort out from other text.
for(i in 1:length(last.names))
{
for(v in 1:length(col2.1))
{
if(is_empty(unlist(str_extract_all(col2.1[v], last.names[i]))) == T)
{lastName.List[v] <- lastName.List[v]} else
{lastName.List[v] <- unlist(str_extract_all(col2.1[v], last.names[i]))}
}
}
#Show missing last names
test.names <- data.frame(raw = raw.data$V2, new = lastName.List)
test.names[test.names$new == "",]#enter all versions of incorrectly recorded last names below
#No incorrectly spelled last names, all entries with "" are events. These should be removed.
#Reset functions
rm(list=ls())
dev.off()
#Libraries
library(dplyr)
library(tidyr)
library(stringr)
library(rlang)
library(Rfast)
#Open Data
setwd("C:/Users/jcronan/Documents/GitHub/WageBilling/2020")
raw.data <- read.table("Time report 2020-01-01 - 2020-12-31.csv", header = F, fill = T, skip = 1, sep = ",", quote = "\"")
codes <- read.table("projectCodes_2020.csv", header = F, fill = T, skip = 1, sep = ",")
#Review Data
str(raw.data)
head(raw.data)
#Create new data frame with the following fields:
#1) Last name
#2) Project Code
#3) Date
#4) Duration
#Generate a vector that converts factor levels of dates into date values
date <- as.Date(raw.data$Date, format = "%m/%d/%Y")
#Generate a vector that converts dates into work weeks
week <- as.numeric(strftime(date, format = "%V"))
#Convert column with names and job codes into a character string
col2.1 <- as.character(raw.data$V2)
#Create a vector that lists possible last names.
last.names <- c("Cronan", "Eagle", "Lascheck", "Tripodi", "Thoreson", "Nemens", "Darmody", "Hallet")
#Create a vector store last names.
lastName.List <- character(length = length(col2.1))
#Check character strings for last names and sort out from other text.
for(i in 1:length(last.names))
{
for(v in 1:length(col2.1))
{
if(is_empty(unlist(str_extract_all(col2.1[v], last.names[i]))) == T)
{lastName.List[v] <- lastName.List[v]} else
{lastName.List[v] <- unlist(str_extract_all(col2.1[v], last.names[i]))}
}
}
#Show missing last names
test.names <- data.frame(raw = raw.data$V2, new = lastName.List)
test.names[test.names$new == "",]#enter all versions of incorrectly recorded last names below
#No incorrectly spelled last names, all entries with "" are events. These should be removed.
#Remove entries that are not staff time records.
remove_these_rows <- which(test.names$new == "",)
raw.data2 <- raw.data[-remove_these_rows,]
col2.2 <- as.character(raw.data2$V2)
lastName.List2 <- character(length = length(col2.2))
for(i in 1:length(last.names))
{
for(v in 1:length(col2.2))
{
if(is_empty(unlist(str_extract_all(col2.2[v], last.names[i]))) == T)
{lastName.List2[v] <- lastName.List2[v]} else
{lastName.List2[v] <- unlist(str_extract_all(col2.2[v], last.names[i]))}
}
}
test.names2 <- data.frame(raw = raw.data2$V2, new = lastName.List2)
tr <- test.names2[test.names2$new == "",]
#If there are rows with mispelled names fix them
if(nrow(tr) == 0)
{
} else
{
#Fix missing last
#Create a list of incorrectly recorded last names.
incorrect.names <- c("incorrectly spelled name")
#Create correspnding list of correct codes.
#Number of elements should corresond with above vector.
#Enter correctly spelled version of name or "DELETE" if entry is not associated with staff time and
#was not included in the "remove_these_rows vector above.
correct.names <- c("Restaino", "Eagle", "DELETE", "DELETE")
#Check character strings for incorrect codes and add correct codes to list.
for(i in 1:length(incorrect.names))
{
for(v in 1:length(col2.1))
{
if(is_empty(unlist(str_extract_all(col2.1[v], incorrect.names[i]))) == T)
{lastName.List[v] <- lastName.List[v]} else
{lastName.List[v] <- correct.names[unlist(str_extract_all(col2.1[v], incorrect.names[i])) == incorrect.names]}
}
}
}
#Show missing last names
test.names <- data.frame(raw = raw.data2$V2, new = lastName.List2)
test.names[test.names$new == "",]#there should not be any
#Delete rows that do not contain hours worked
rd_remove_bad_names <- raw.data2[!(lastName.List == "DELETE") == T,]
rd_remove_bad_names <- raw.data2
#Confirm that rows to be deleted were removed
#Lengths should be equal:
length(raw.data2[,1])
length(test.names[test.names$new == "DELETE",][,1])+length(rd_remove_bad_names$V2)
#Redo project by person list
col2.3 <- as.character(rd_remove_bad_names$V2)
#Create a vector that lists possible project codes.
project.codes <- c("ADM", "LVE", "3DF", "FLB", "JMV", "WWC", "FCM", "FCC", "TMS", "LEF",
"UAV", "RBP", "MJO", "SMC", "PSP", "RUD", "EEF", "DUL", "ROG", "PFS")
#Create a vector store project codes.
projectCode.List <- character(length = length(col2.3))
#Check character strings for last names and sort out from other text.
for(i in 1:length(project.codes))
{
for(v in 1:length(col2.3))
{
if(is_empty(unlist(str_extract_all(col2.3[v], project.codes[i]))) == T)
{projectCode.List[v] <- projectCode.List[v]} else
{projectCode.List[v] <- unlist(str_extract_all(col2.3[v], project.codes[i]))}
}
}
#Identify billing codes that could not be identified.
test <- cbind(col2.3, projectCode.List)
test[test[,2] == "",]
#Fix missing codes
#Create a list of incorrectly recorded project codes.
incorrect.codes <- c("3D", "Taylor Creek", "FSB", "Carr/Taylor Creek", "Holiday", "3Df", "TRN", "SERA", "Sick Leave", "AMFAV", "Rx", "AL",
"Fuel Moisture", "adm", "PT")
#Create correspnding list of correct codes.
correct.codes <- c("3DF", "WWC", "FLB", "WWC", "LVE", "3Df", "ADM", "ADM", "LVE", "UAV", "ADM", "LVE", "3DF", "ADM", "ADM")
#Check character strings for incorrect codes and add correct codes to list.
for(i in 1:length(incorrect.codes))
{
for(v in 1:length(col2.2))
{
if(is_empty(unlist(str_extract_all(col2.2[v], incorrect.codes[i]))) == T)
{projectCode.List[v] <- projectCode.List[v]} else
{projectCode.List[v] <- correct.codes[unlist(str_extract_all(col2.2[v], incorrect.codes[i])) == incorrect.codes]}
}
}
#Add the admin code (ADM) for all entries that do not list a code
projectCode.List[projectCode.List == ""] <- "ADM"
#Identify billing codes that could not be identified.
test <- cbind(col2.2, projectCode.List)
test[test[,2] == "",]
#Calculate duration
col3.1 <- strsplit(as.character(raw.data$V6), ":")
col3.1_hrs <- as.numeric(unlist(lapply(col3.1, function(x) x[1])))
col3.1_mins <- as.numeric(unlist(lapply(col3.1, function(x) x[2])))/60
duration <- round(col3.1_hrs + col3.1_mins,2)
#Create a data frame
cal_d <- as.character(unlist(lapply(raw.data$V4, function(x) x[1])))
s_time <- as.character(unlist(lapply(raw.data$V5, function(x) x[1])))
billing <- data.frame(last_name = lastName.List2,
project_code = projectCode.List,
date = cal_d,
start_time = s_time,
duration = duration,
week = week, stringsAsFactors = F)
#Reset functions
rm(list=ls())
dev.off()
#Libraries
library(dplyr)
library(tidyr)
library(stringr)
library(rlang)
library(Rfast)
#Open Data
setwd("C:/Users/jcronan/Documents/GitHub/WageBilling/2019")
raw.data <- read.table("Time report 2019-01-01 - 2019-12-31.csv", header = F, fill = T, skip = 1, sep = ",")
codes <- read.table("projectCodes_2019.csv", header = F, fill = T, skip = 1, sep = ",")
#Review Data
str(raw.data)
head(raw.data)
#Create new data frame with the following fields:
#1) Last name
#2) Project Code
#3) Date
#4) Duration
#Generate a vector that converts factor levels of dates into date values
date <- as.Date(raw.data$V4, format = "%m/%d/%Y")
#Generate a vector that converts dates into work weeks
week <- as.numeric(strftime(date, format = "%V"))
#Convert column with names and job codes into a character string
col2.1 <- as.character(raw.data$V2)
#Create a vector that lists possible last names.
last.names <- c("Cronan", "Restaino", "Eagle", "Lascheck", "Tripodi","Thoreson", "Nemens")
#Create a vector store last names.
lastName.List <- character(length = length(col2.1))
#Check character strings for last names and sort out from other text.
for(i in 1:length(last.names))
{
for(v in 1:length(col2.1))
{
if(is_empty(unlist(str_extract_all(col2.1[v], last.names[i]))) == T)
{lastName.List[v] <- lastName.List[v]} else
{lastName.List[v] <- unlist(str_extract_all(col2.1[v], last.names[i]))}
}
}
#Show missing last names
test.names <- data.frame(raw = raw.data$V2, new = lastName.List)
test.names[test.names$new == "",]#enter all versions of incorrectly recorded last names below
#No incorrectly spelled last names, all entries with "" are events. These should be removed.
#Remove entries that are not staff time records.
remove_these_rows <- which(test.names$new == "",)
raw.data2 <- raw.data[-remove_these_rows,]
col2.2 <- as.character(raw.data2$V2)
lastName.List2 <- character(length = length(col2.2))
for(i in 1:length(last.names))
{
for(v in 1:length(col2.2))
{
if(is_empty(unlist(str_extract_all(col2.2[v], last.names[i]))) == T)
{lastName.List2[v] <- lastName.List2[v]} else
{lastName.List2[v] <- unlist(str_extract_all(col2.2[v], last.names[i]))}
}
}
test.names2 <- data.frame(raw = raw.data2$V2, new = lastName.List2)
tr <- test.names2[test.names2$new == "",]
#If there are rows with mispelled names fix them
if(nrow(tr) == 0)
{
} else
{
#Fix missing last
#Create a list of incorrectly recorded last names.
incorrect.names <- c("incorrectly spelled name")
#Create correspnding list of correct codes.
#Number of elements should corresond with above vector.
#Enter correctly spelled version of name or "DELETE" if entry is not associated with staff time and
#was not included in the "remove_these_rows vector above.
correct.names <- c("Restaino", "Eagle", "DELETE", "DELETE")
#Check character strings for incorrect codes and add correct codes to list.
for(i in 1:length(incorrect.names))
{
for(v in 1:length(col2.1))
{
if(is_empty(unlist(str_extract_all(col2.1[v], incorrect.names[i]))) == T)
{lastName.List[v] <- lastName.List[v]} else
{lastName.List[v] <- correct.names[unlist(str_extract_all(col2.1[v], incorrect.names[i])) == incorrect.names]}
}
}
}
#Show missing last names
test.names <- data.frame(raw = raw.data2$V2, new = lastName.List2)
test.names[test.names$new == "",]#there should not be any
#Delete rows that do not contain hours worked
rd_remove_bad_names <- raw.data2[!(lastName.List == "DELETE") == T,]
rd_remove_bad_names <- raw.data2
#Confirm that rows to be deleted were removed
#Lengths should be equal:
length(raw.data2[,1])
length(test.names[test.names$new == "DELETE",][,1])+length(rd_remove_bad_names$V2)
#Redo project by person list
col2.3 <- as.character(rd_remove_bad_names$V2)
#Create a vector that lists possible project codes.
project.codes <- c("ADM", "LVE", "3DF", "FLB", "JMV", "WWC", "FCM", "FCC", "TMS", "LEF",
"UAV", "RBP", "MJO", "SMC", "PSP", "RUD", "EEF", "DUL", "ROG", "PFS")
#Create a vector store project codes.
projectCode.List <- character(length = length(col2.3))
#Check character strings for last names and sort out from other text.
for(i in 1:length(project.codes))
{
for(v in 1:length(col2.3))
{
if(is_empty(unlist(str_extract_all(col2.3[v], project.codes[i]))) == T)
{projectCode.List[v] <- projectCode.List[v]} else
{projectCode.List[v] <- unlist(str_extract_all(col2.3[v], project.codes[i]))}
}
}
#Identify billing codes that could not be identified.
test <- cbind(col2.3, projectCode.List)
test[test[,2] == "",]
#Fix missing codes
#Create a list of incorrectly recorded project codes.
incorrect.codes <- c("LFE", "HOL", "Office", "A/L", "S/L", "AL", "SL", "TRN", "doctor", "AGU", "MJU",
"MUO", "WCC", "WWF", "other projects", "NPR", "PWFSL", "home", "ODERA", "lab",
"Home", "Lab")
#Create correspnding list of correct codes.
correct.codes <- c("LEF", "LVE", "ADM", "LVE", "LVE", "LVE", "LVE", "ADM", "ADM", "ADM", "MJO", "MJO", "WWC", "WWC",
"ADM", "ADM", "ADM", "ADM", "ADM", "ADM", "ADM", "ADM")
#Check character strings for incorrect codes and add correct codes to list.
for(i in 1:length(incorrect.codes))
{
for(v in 1:length(col2.2))
{
if(is_empty(unlist(str_extract_all(col2.2[v], incorrect.codes[i]))) == T)
{projectCode.List[v] <- projectCode.List[v]} else
{projectCode.List[v] <- correct.codes[unlist(str_extract_all(col2.2[v], incorrect.codes[i])) == incorrect.codes]}
}
}
#Add the admin code (ADM) for all entries that do not list a code
projectCode.List[projectCode.List == ""] <- "ADM"
#Identify billing codes that could not be identified.
test <- cbind(col2.2, projectCode.List)
test[test[,2] == "",]
#Calculate duration
col3.1 <- strsplit(as.character(raw.data$V6), ":")
col3.1_hrs <- as.numeric(unlist(lapply(col3.1, function(x) x[1])))
col3.1_mins <- as.numeric(unlist(lapply(col3.1, function(x) x[2])))/60
duration <- round(col3.1_hrs + col3.1_mins,2)
